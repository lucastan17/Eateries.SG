{"remainingRequest":"C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\src\\components\\Declaration.vue?vue&type=template&id=e519330c&","dependencies":[{"path":"C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\src\\components\\Declaration.vue","mtime":1603981322733},{"path":"C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\hengj\\Documents\\GitHub\\Eateries.SG\\Eateries.SG\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJib2R5IiwgWwogICAgX3ZtLl9tKDApLAogICAgX2MoCiAgICAgICJkaXYiLAogICAgICB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICJkYXRhLWNvbGxhcHNlIjogIm1lZGl1bSIsCiAgICAgICAgICAiZGF0YS1hbmltYXRpb24iOiAiZGVmYXVsdCIsCiAgICAgICAgICAiZGF0YS1kdXJhdGlvbiI6ICI0MDAiLAogICAgICAgICAgaWQ6ICJOYXZpZ2F0aW9uIgogICAgICAgIH0KICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1jb250YWluZXIiIH0sIFsKICAgICAgICAgIF92bS5fbSgxKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogIm5hdmlnYXRpb24tcmlnaHQiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygicm91dGVyLWxpbmsiLCB7IGF0dHJzOiB7IHRvOiAiLyIsIGV4YWN0OiAiIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSG9tZSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoInJvdXRlci1saW5rIiwgeyBhdHRyczogeyB0bzogIi9wcm9maWxlIiwgZXhhY3Q6ICIiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJQcm9maWxlIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL3BhcnRuZXJlYXRlcmllcyIsIGV4YWN0OiAiIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJQYXJ0bmVyIEVhdGVyaWVzIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2N1cnJlbnRib29raW5ncyIsIGV4YWN0OiAiIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJDdXJyZW50IEJvb2tpbmdzIildCiAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY3VycmVudCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHRvOiAiL2RlY2xhcmF0aW9uIiwgZXhhY3Q6ICIiIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJEZWNsYXJhdGlvbiIpXQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0KICAgICksCiAgICBfdm0uX20oMiksCiAgICBfYygiZGl2IiwgWwogICAgICBfYygiaDMiLCBbX3ZtLl92KCJDb21wbGV0ZSBiZWZvcmUgZW50ZXJpbmcgdGhlIEVhdGVyeSIpXSksCiAgICAgIF9jKCJkaXYiLCB7fSwgWwogICAgICAgIF9jKCJmb3JtIiwgeyBhdHRyczogeyBpZDogInRlbXBlcmF0dXJlLWZvcm0iIH0gfSwgWwogICAgICAgICAgX2MoImxhYmVsIiwgeyBhdHRyczogeyBmb3I6ICJ0ZW1wIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJDdXJyZW50IFRlbXBlcmF0dXJlOiIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX2MoImlucHV0IiwgewogICAgICAgICAgICBkaXJlY3RpdmVzOiBbCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgbmFtZTogIm1vZGVsIiwKICAgICAgICAgICAgICAgIHJhd05hbWU6ICJ2LW1vZGVsLmxhenkiLAogICAgICAgICAgICAgICAgdmFsdWU6IF92bS5jb250ZW50LnRlbXAsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY29udGVudC50ZW1wIiwKICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyBsYXp5OiB0cnVlIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy1pbnB1dCIsCiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiB9LAogICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmNvbnRlbnQudGVtcCB9LAogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNoYW5nZTogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRzZXQoX3ZtLmNvbnRlbnQsICJ0ZW1wIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfYygibGFiZWwiLCB7IGF0dHJzOiB7IGZvcjogInN5bXB0b21zIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEbyB5b3UgaGF2ZSBhbnkgQ09WSUQtMTkgc3ltcHRvbXMgdGhhdCB5b3UgcmVjZW50bHkgYWNxdWlyZWQ/OiIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKCJpbnB1dCIsIHsKICAgICAgICAgICAgZGlyZWN0aXZlczogWwogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIG5hbWU6ICJtb2RlbCIsCiAgICAgICAgICAgICAgICByYXdOYW1lOiAidi1tb2RlbC5sYXp5IiwKICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uY29udGVudC5xMSwKICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJjb250ZW50LnExIiwKICAgICAgICAgICAgICAgIG1vZGlmaWVyczogeyBsYXp5OiB0cnVlIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIF0sCiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidy1pbnB1dCIsCiAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6ICJ0ZXh0IiB9LAogICAgICAgICAgICBkb21Qcm9wczogeyB2YWx1ZTogX3ZtLmNvbnRlbnQucTEgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjaGFuZ2U6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgcmV0dXJuIF92bS4kc2V0KF92bS5jb250ZW50LCAicTEiLCAkZXZlbnQudGFyZ2V0LnZhbHVlKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF9jKCJsYWJlbCIsIHsgYXR0cnM6IHsgZm9yOiAiZmFtaWx5IiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJEbyB5b3UgaGF2ZSBhbnlvbmUgaW4gdGhlIHNhbWUgaG91c2Vob2xkIGhhdmluZyBmZXZlciwgYW5kL29yIHNob3dpbmcgdGhlIGFueSBzeW1wdG9tcyBvZiBDT1ZJRC0xOT8iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfYygiaW5wdXQiLCB7CiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFsKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAibW9kZWwiLAogICAgICAgICAgICAgICAgcmF3TmFtZTogInYtbW9kZWwubGF6eSIsCiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmNvbnRlbnQucTIsCiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiAiY29udGVudC5xMiIsCiAgICAgICAgICAgICAgICBtb2RpZmllcnM6IHsgbGF6eTogdHJ1ZSB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICBdLAogICAgICAgICAgICBzdGF0aWNDbGFzczogInctaW5wdXQiLAogICAgICAgICAgICBhdHRyczogeyB0eXBlOiAidGV4dCIgfSwKICAgICAgICAgICAgZG9tUHJvcHM6IHsgdmFsdWU6IF92bS5jb250ZW50LnEyIH0sCiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2hhbmdlOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBfdm0uJHNldChfdm0uY29udGVudCwgInEyIiwgJGV2ZW50LnRhcmdldC52YWx1ZSkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImJ1dHRvbiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKQogICAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLnNhdmVUZW1wcygkZXZlbnQpCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJTdWJtaXQiKV0KICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIFsKICAgICAgICBfYygKICAgICAgICAgICJidXR0b24iLAogICAgICAgICAgewogICAgICAgICAgICBvbjogewogICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigkZXZlbnQpIHsKICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpCiAgICAgICAgICAgICAgICByZXR1cm4gX3ZtLmxvYWRUZW1wcygpCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiTG9hZCBSZWNvcmRzIildCiAgICAgICAgKSwKICAgICAgICBfYygidWwiLCB7IGF0dHJzOiB7IGlkOiAidGVtcGVyYXR1cmUtbGlzdCIgfSB9KQogICAgICBdKQogICAgXSkKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImJhbm5lciIsIGF0dHJzOiB7IGlkOiAiQmFubmVyIiB9IH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJiYW5uZXItd3JhcCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibm90aWNlLXRleHQiIH0sIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkNoZWNrIG91dCBvdXIgcHJvbW90aW9ucyBhbmQgZG9uJ3QgZm9yZ2V0IHRvIGludml0ZSB5b3VyZnJpZW5kcyBmb3IgbW9yZSBwZXJrcyEiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibmF2aWdhdGlvbi1sZWZ0IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgYXR0cnM6IHsKICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL0VhdGVyaWVzU0cucG5nIiksCiAgICAgICAgICBsb2FkaW5nOiAibGF6eSIsCiAgICAgICAgICB3aWR0aDogIjgzIiwKICAgICAgICAgIGhlaWdodDogImF1dG8iCiAgICAgICAgfQogICAgICB9KSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsb2dvLXRleHQiIH0sIFtfdm0uX3YoIkVBVEVSSUVTLlNHIildKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXIiLCBhdHRyczogeyBpZDogIkhlYWRlciIgfSB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IGF0dHJzOiB7IGlkOiAiY29udGFpbmVyLWZsZXgiIH0gfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZC1jb250ZW50IiB9LCBbCiAgICAgICAgICBfYygiaDEiLCBbX3ZtLl92KCJEZWNsYXJhdGlvbiIpXSksCiAgICAgICAgICBfYygicCIsIFtfdm0uX3YoIkRvIHlvdXIgcGFydCB0byBtYWtlIGl0IGEgc2FmZXIgcGxhY2UgZm9yIGFsbCIpXSkKICAgICAgICBdKQogICAgICBdKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}